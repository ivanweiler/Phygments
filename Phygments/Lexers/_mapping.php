<?php
/*
    phygments.lexers._mapping
    ~~~~~~~~~~~~~~~~~~~~~~~~

    Lexer mapping defintions. This file is generated by itself. Everytime
    you change something on a builtin lexer defintion, run this script from
    the lexers folder to update it.

    Do not alter the LEXERS dictionary by hand.

    :copyright: Copyright 2006-2013 by the Pygments team, see AUTHORS.
	:copyright: Copyright 2013-2014 by the Phygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
*/

$LEXERS = [
	'Css' => ['CSS',['css',],['*.css',],['text/css',],],
	'Html' => ['HTML',['html',],['*.html','*.htm','*.xhtml','*.xslt',],['text/html','application/xhtml+xml',],],
	'HtmlPhp' => ['HTML+PHP',['html+php',],['*.phtml',],['application/x-php','application/x-httpd-php','application/x-httpd-php3','application/x-httpd-php4','application/x-httpd-php5',],],
	'Javascript' => ['JavaScript',['js','javascript',],['*.js',],['application/javascript','application/x-javascript','text/x-javascript','text/javascript',],],
	'Php' => ['PHP',['php','php3','php4','php5',],['*.php','*.php[345]','*.inc',],['text/x-php',],],
	'Sass' => ['Sass',['sass','SASS',],['*.sass',],['text/x-sass',],],
	'Scss' => ['SCSS',['scss',],['*.scss',],['text/x-scss',],],
];

if(php_sapi_name() == 'cli') {
	
	$path = dirname(__FILE__);
	
	set_include_path(dirname(dirname($path)));
	spl_autoload_register(function($class) {
		require_once str_replace(array('_','\\'), DIRECTORY_SEPARATOR, $class) . '.php';
	});
	
	//modified drupal_var_export() // Drupal
	function pprint($var, $prefix = '')
	{
		static $level = 0;
		
		if (is_array($var)) {
			$level++;
			if (empty($var)) {
				$output = '[]';
			}
			else {
				$output = "[".($level==1 ? "\n" : '');
				// Don't export keys if the array is non associative.
				$export_keys = array_values($var) != $var;
				foreach ($var as $key => $value) {
					$output .= ($export_keys ? "\t" . pprint($key) . ' => ' : '') . pprint($value, ' ') . "," . ($level==1 ? "\n" : '');
				}
				$output .= ']';
			}
			$level--;
		} elseif (is_string($var)) {
			$line_safe_var = str_replace("\n", '\n', $var);
			if (strpos($var, "\n") !== false || strpos($var, "'") !== false) {
				// If the string contains a line break or a single quote, use the
				// double quote export mode. Encode backslash and double quotes and
				// transform some common control characters.
				$var = str_replace(array('\\', '"', "\n", "\r", "\t"), array('\\\\', '\"', '\n', '\r', '\t'), $var);
				$output = '"' . $var . '"';
			}
			else {
				$output = "'" . $var . "'";
			}
		} else {
			$output = var_export($var, true);
		}
	
		if ($prefix) {
			$output = str_replace("\n", "\n$prefix", $output);
		}
	
		return $output;
	}	
	
    # lookup lexers
    $found_lexers = [];
    foreach(scandir(dirname(__FILE__)) as $filename) {
    	
    	if(substr($filename, -4) == '.php' && substr($filename, 0, 1) != '_') {
    		
    		$lexer_name = substr($filename, 0, -4);
    		$module_name = sprintf('\Phygments\Lexers\%s', $lexer_name);
    		
    		//new instance or reflection?
    		//include_once $filename;
    		$class = new ReflectionClass($module_name);
    		$lexer_info = $class->getDefaultProperties();
    		
    		if(isset($lexer_info['name']) && !empty($lexer_info['name'])) {
    			
    			print "$module_name\n";
    			
    			$found_lexers[$lexer_name] = [
    				$lexer_info['name'],
    				$lexer_info['aliases'],
    				$lexer_info['filenames'],
    				$lexer_info['mimetypes'],
    			];    			
    		}
    		
    	}
    	
    }

    # sort them, that should make the diff files for svn smaller    
    ksort($found_lexers);
    
    # extract useful sourcecode from this file
    $content = file_get_contents(__FILE__);
    
    $header = strstr($content, '$LEXERS = [', true);
    $footer = strstr($content, "if(php_sapi_name() == 'cli') {");
    
    # write new file
    $f = fopen(__FILE__, 'wb');
    fwrite($f, $header);
    fwrite($f, sprintf('$LEXERS = %s;'."\n\n", pprint($found_lexers)));
    fwrite($f, $footer);
    fclose($f);
    
}
